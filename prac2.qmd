---
title: "prac2"
---

## Practical 2

```{r}
set.seed(1)
# First step
# Creating x as a sequence from 1 to 100
x <- seq(1,100, by = 1)
# Y as noisy sine wave
y <- sin(x) + rnorm(100)

# Second step: Lowess algorithm
customLowess <- function(x, y, f = 0.2) {
  n <- length(x)
  smoothed_y <- numeric(n)

  # Calculate smooth values using weighted least squares
  for (i in 1:n) {
    # Calculate distances to the point i
    distances <- abs(x - x[i])
    
    # Compute weights for LOWESS (triangular kernel)
    weights <- exp(-(distances^2) / (2 * (f * diff(range(x)))^2))
    
    # Perform weighted least squares fitting
    weighted_fit <- lm(y ~ x, weights = weights)
    
    # Store the smoothed value for point i
    smoothed_y[i] <- predict(weighted_fit, newdata = data.frame(x = x[i]))
  }
  
  return(smoothed_y)
}

# Third step: Use R's Built-in lowess()
lowess_fit <- lowess(x, y, f = 0.2, iter = 0)

# Fourth step: Plot the Results
plot(x, y, main = "Comparison of Custom and Built-In LOWESS",
     xlab = "X", ylab = "Y", pch = 19, col = "gray", cex = 0.7)
lines(x, customLowess(x, y, f = 0.2), col = "blue", lwd = 2)
lines(lowess_fit$x, lowess_fit$y, col = "red", lwd = 2, lty = 2)
legend("topright", legend = c("Custom LOWESS", "Built-In LOWESS"),
       col = c("blue", "red"), lwd = 2, lty = c(1, 2))

```
